import threading
import time
import queue
import random

class MultimediaTask:
    def _init_(self, task_id, priority):
        self.task_id = task_id
        self.priority = priority

def multimedia_communication(task_queue, completed_tasks):
    while True:
        if not task_queue.empty():
            priority, task = task_queue.get()
            print(f"Processing Multimedia Task {task.task_id} with priority {task.priority}")
            completed_tasks.append((task.priority, task))
        time.sleep(0.5)  # Simulate processing time

def task_scheduler(task_queue):
    while True:
        tasks = [MultimediaTask(task_id, random.randint(1, 3)) for task_id in range(1, 4)]
        random.shuffle(tasks)  # Shuffle the order of tasks

        for task in tasks:
            task_queue.put((-task.priority, task))  # Use negative priority for sorting
            time.sleep(1)  # Introduce a delay between task submissions

        print("====================")  # Four times wider separator after each iteration

def main():
    task_queue = queue.PriorityQueue()
    completed_tasks = []

    communication_thread = threading.Thread(target=multimedia_communication, args=(task_queue, completed_tasks), daemon=True)
    scheduler_thread = threading.Thread(target=task_scheduler, args=(task_queue,), daemon=True)

    communication_thread.start()
    scheduler_thread.start()

    try:
        while True:
            time.sleep(1)
            if completed_tasks:
                completed_tasks.sort()  # Sort completed tasks by priority in ascending order
                print("\nCompleted Tasks:")
                for _, task in completed_tasks:
                    print(f"Task {task.task_id} with priority {task.priority}")
                completed_tasks = []  # Clear the list after printing
    except KeyboardInterrupt:
        print("Exiting the RTOS simulation.")

if _name_ == "_main_":
    main()
